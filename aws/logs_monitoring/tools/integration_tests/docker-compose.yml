version: "3.8"

services:
  recorder:
    image: ${PYTHON_BASE}
    command: /bin/sh -c 'pip install protobuf && ./recorder.py'
    volumes:
      - ./recorder:/recorder
    working_dir: /recorder
    environment:
      SERVER_PORT: 8080
    expose:
      - 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3

  forwarder:
    image: datadog-log-forwarder:${PYTHON_RUNTIME}
    command: lambda_function.lambda_handler
    environment:
      AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-0000000000}
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_SECURITY_TOKEN: "${AWS_SECURITY_TOKEN}"
      AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
      AWS_DEFAULT_REGION: us-east-1
      DD_LOG_LEVEL: ${LOG_LEVEL:-info}
      DD_API_KEY: abcdefghijklmnopqrstuvwxyz012345 # Must be 32 characters exactly
      DD_URL: recorder # Used for logs intake
      DD_PORT: 8080 # API port to use
      DD_SITE: datadog.com
      DD_API_URL: http://recorder:8080
      DD_LOGS_INTAKE_URL: recorder:8080
      DD_TRACE_INTAKE_URL: http://recorder:8080
      DD_NO_SSL: "true"
      DD_SKIP_SSL_VALIDATION: "true"
      DD_USE_TCP: "false"
      DD_USE_COMPRESSION: "false"
      DD_ADDITIONAL_TARGET_LAMBDAS: "${EXTERNAL_LAMBDAS}"
      DD_S3_BUCKET_NAME: "${DD_S3_BUCKET_NAME}"
      DD_FETCH_LAMBDA_TAGS: "true"
      DD_FETCH_LOG_GROUP_TAGS: "true"
      DD_FETCH_STEP_FUNCTIONS_TAGS: "false"  # intentionally set false to allow integration test for step function logs to run without hitting aws
      DD_STORE_FAILED_EVENTS: "false"
      DD_TRACE_ENABLED: "true"
    expose:
      - 8080
    depends_on:
      recorder:
        condition: service_healthy
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/2015-03-31/functions/function/invocations"]
        interval: 10s
        timeout: 5s
        retries: 3


  tester:
    image: ${PYTHON_BASE}
    command: /bin/sh -c 'pip install "deepdiff<6" && python -m unittest discover'
    volumes:
      - ./tester:/tester
      - ${SNAPSHOTS_DIR_NAME}:/snapshots
    working_dir: /tester
    environment:
      RECORDER_URL: http://recorder:8080/recording
      FORWARDER_URL: http://forwarder:8080/2015-03-31/functions/function/invocations
      UPDATE_SNAPSHOTS: ${UPDATE_SNAPSHOTS:-false}
      SNAPSHOTS_DIR_NAME: ${SNAPSHOTS_DIR_NAME}
    depends_on:
        forwarder:
            condition: service_healthy
        recorder:
            condition: service_healthy
